import 'dotenv/config'
import { GoogleSpreadsheet } from 'google-spreadsheet';
import { JWT } from 'google-auth-library';
import 'node-fetch';
import { setTimeout } from "timers/promises";
import { log } from 'console';

// Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
const serviceAccountAuth = new JWT({
  // env var values here are copied from service account credentials generated by google
  // see "Authentication" section in docs for more info
  email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
  key: process.env.GOOGLE_PRIVATE_KEY,
  scopes: ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive.file'],
})

const books = new GoogleSpreadsheet(process.env.BOOKS_SHEET_ID, serviceAccountAuth)

await books.loadInfo() // loads document properties and worksheets
const booksSheet = books.sheetsByTitle['Books'] // or use `doc.sheetsById[id]` or `doc.sheetsByTitle[title]`
const allBooks = await booksSheet.getRows()

var count = 0;
var manualCount = 0;
var manualIsbnCount = 0;

for (var i = 0; i < allBooks.length; i++) {
  if (count >= 30) { console.log("Pausing..."); await setTimeout(30000); count = 0; }
  const currPages = allBooks[i].get("Pages");
  const currIsbn = allBooks[i].get("ISBN");
  const title = allBooks[i].get("Title");
  const authorFirst = allBooks[i].get("Author First");
  const authorLast = allBooks[i].get("Author Last");
  const series = allBooks[i].get("Series");

  log(`Processing ${title}...`);

  // Stop if we already have a page count and ISBN
  if (!Number.isNaN(currPages) && !isNaN(parseFloat(currPages)) && currIsbn.length > 0) { continue; }
  // Skip if both are manual
  if (currPages == "Manual" && currIsbn == "Manual") { continue; }

  const bookInfo = await getBookInfo(title, authorFirst, authorLast, series);

  var saveMessage = `Saved ${title}`;

  if (Number.isNaN(currPages) || isNaN(parseFloat(currPages))) {
    var newPages = '';
    if (bookInfo && bookInfo["number_of_pages_median"] && bookInfo["number_of_pages_median"] > 1) {
      newPages = bookInfo["number_of_pages_median"];
      saveMessage += ` (${newPages} pages)`;
    } else {
      manualCount++;
      newPages = "Manual";
      saveMessage += ` - needs manual pages`;
    }
    allBooks[i].set("Pages",newPages);
  }
  
  if (!currIsbn.length > 0 || currIsbn == "Manual") {
    var newIsbn = '';
    if (bookInfo && bookInfo["isbn"]) {
      newIsbn = bookInfo["isbn"][0];
      saveMessage += `, ISBN: ${newIsbn}`;
    } else {
      manualIsbnCount++;
      newIsbn = "Manual";
      saveMessage += `, ISBN needs manual entry.`;
    }
    allBooks[i].set("ISBN",newIsbn);
  }

  await allBooks[i].save().then(() => console.log(`${saveMessage}`)).catch((err) => console.log(err));
  count++;
}

console.log(`Total books: ${allBooks.length}`);
console.log(`Books needing manual pagecounts: ${manualCount}`);
console.log(`Books needing manual ISBNs: ${manualIsbnCount}`);
console.log("Finished!");

async function getBookInfo(title, authorFirst, authorLast, series) {
  var formAuthor = '';
  if (authorFirst != 'Various' && authorLast != 'Various') {
    formAuthor = `+${cleanText(authorFirst)}+${cleanText(authorLast)}`;
  } else {
    formAuthor = `+${cleanText(series.split(" ")[0])}`;
  }
  const searchString = `q=${cleanText(title)}${formAuthor}&lang=en`
  
  const path = `https://openlibrary.org/search.json?${searchString}`;
  const request = await fetch(path);
  const data = await request.json();
  for (let z = 0; z < data["docs"].length; z++) {
    if (data["docs"][z]["number_of_pages_median"] > 0) {
      return data["docs"][z];
    }
  };
  return data["docs"][0];
}

function cleanText(text) {
  return text.toLowerCase().replace(/[^\w\s]|\bthe\b|\b\d\b/g, '').trim().replace(/\s+/g, '+');
}